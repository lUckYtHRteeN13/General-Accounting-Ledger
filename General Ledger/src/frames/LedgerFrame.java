/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frames;

import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import utils.SQLThread;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Date;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author netha
 */
public class LedgerFrame extends javax.swing.JPanel {

    MainFrame parent;
    private DefaultTableModel model;
    private String accountCode;
    private double credit;
    private double debit;
    private double total;
    private Object[] data;
    private List<String> columnFilters;

    /**
     * Creates new form LedgerForm
     */
    public LedgerFrame(MainFrame main) {
        initComponents();
        this.parent = main;
        this.model = (DefaultTableModel) ledgerTable.getModel();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        accountCodeTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ledgerTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        creditLBL = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        debitLBL = new javax.swing.JLabel();
        totalLBL = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        goBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        entriesLBL = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(1200, 700));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(null);

        accountCodeTF.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        accountCodeTF.setText("Account Code");
        add(accountCodeTF);
        accountCodeTF.setBounds(20, 130, 270, 30);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Account Code");
        add(jLabel1);
        jLabel1.setBounds(20, 100, 112, 20);

        ledgerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(ledgerTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(20, 190, 1160, 350);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Credits");
        add(jLabel2);
        jLabel2.setBounds(870, 560, 150, 20);

        creditLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        creditLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        creditLBL.setText("0.00");
        add(creditLBL);
        creditLBL.setBounds(870, 580, 150, 30);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Debit");
        add(jLabel4);
        jLabel4.setBounds(1030, 560, 150, 20);

        debitLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        debitLBL.setForeground(new java.awt.Color(0, 153, 153));
        debitLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        debitLBL.setText("0.00");
        add(debitLBL);
        debitLBL.setBounds(1030, 580, 150, 30);

        totalLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        totalLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalLBL.setText("0.00");
        add(totalLBL);
        totalLBL.setBounds(950, 650, 150, 30);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Total Profit");
        add(jLabel7);
        jLabel7.setBounds(950, 630, 150, 20);

        goBtn.setText("Go");
        goBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBtnActionPerformed(evt);
            }
        });
        add(goBtn);
        goBtn.setBounds(300, 130, 50, 30);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("GENERAL ACCOUNTING LEDGER");
        add(jLabel3);
        jLabel3.setBounds(0, 30, 1200, 32);

        jLabel5.setText("Result:");
        add(jLabel5);
        jLabel5.setBounds(20, 170, 50, 16);

        entriesLBL.setText("0 Entries");
        add(entriesLBL);
        entriesLBL.setBounds(60, 170, 290, 16);

        add(jComboBox1);
        jComboBox1.setBounds(400, 130, 140, 30);

        add(jComboBox2);
        jComboBox2.setBounds(560, 130, 140, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        this.model.setColumnIdentifiers(this.parent.getFields().toArray());
        
        for (int i=0; i<ledgerTable.getColumnCount(); i++) {
            TableColumn column = this.ledgerTable.getColumnModel().getColumn(i);
            column.setResizable(false);
        }
                
    }//GEN-LAST:event_formComponentShown

    private void goBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBtnActionPerformed
        // TODO add your handling code here:
        
        if (!this.parent.getAccounts().contains(this.accountCodeTF.getText())) {
            JOptionPane.showMessageDialog(this, "No Account Existed", "Input Error", 0);
            return;
        } else if (this.accountCodeTF.getText().equals(this.accountCode)) {
            return;
        }
        
        this.accountCode = this.accountCodeTF.getText();
        this.accountCodeTF.setText(this.accountCode);
        
        this.model.setNumRows(0);

        try {
            this.loadAccount();
            
        } catch (InterruptedException | SQLException ex) {
            Logger.getLogger(LedgerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_goBtnActionPerformed

    
    private void displayTable() throws InterruptedException, SQLException {
        List<SQLThread> threads = new ArrayList<>();
        int offset = 0;
        for (int i=1; i <= this.parent.getNoThreads(); i++) {
            
            String dataQuery = String.format("SELECT %s "
                    + "FROM tblentry "
                    + "WHERE AccountCode=\"%s\" "
                    + "ORDER BY DatePosted "
                    + "LIMIT %d OFFSET %d;", 
                    String.join(", ", this.parent.getFields()), 
                    this.accountCode, this.parent.getLimit(), offset);
            
            
            SQLThread tableThread = new SQLThread(1, dataQuery);
            tableThread.start();
            threads.add(tableThread);
            
            
            offset += this.parent.getLimit();
            
        }
        
        for (SQLThread thread : threads) {
            thread.join();
            ResultSet dataResult = thread.getResultSet();
            while (dataResult.next()) {
                Date DatePosted = dataResult.getDate(1);
                String DocNumber = dataResult.getString(2);
                String BusinessCode = dataResult.getString(3);
                String LocationCode = dataResult.getString(4);
                String ModuleCode = dataResult.getString(5);
                String NormalBalance = dataResult.getString(6);
                Double Amount = dataResult.getDouble(7);
                Double Amount2 = dataResult.getDouble(8);
                Double Credit = dataResult.getDouble(9);
                Double Debit = dataResult.getDouble(10);
                Double FinalAmount = dataResult.getDouble(11);

                Object[] row = {DatePosted, DocNumber, BusinessCode, LocationCode, 
                    ModuleCode, NormalBalance, Amount, Amount2, Credit, Debit, FinalAmount };
                this.model.addRow(row);
            }
            threads.remove(thread);
        }
        
        this.data = this.model.getDataVector().toArray();      
    }
    
    private void displayInfo() throws InterruptedException, SQLException {
        int entries = 0;
        DecimalFormat df = new DecimalFormat("#,##0.00");
        String amountQuery = String.format("SELECT COUNT(*), SUM(Credit), SUM(Debit) "
                + "FROM tblentry "
                + "WHERE AccountCode=\"%s\";", this.accountCode);
        
        SQLThread Thread1 = new SQLThread(1, amountQuery);
        
        Thread1.start();
        Thread1.join();
        
        ResultSet Result1 = Thread1.getResultSet();
        
        if (Result1.next()) {
            entries = Result1.getInt(1);
            this.credit = Result1.getDouble(2);
            this.debit = Result1.getDouble(3);
            this.total = this.credit - this.debit;
        }
        
        if (this.total < 0) {
            this.totalLBL.setForeground(Color.red);
        } else {
            this.totalLBL.setForeground(new java.awt.Color(0, 204, 102));
        }
        
        this.entriesLBL.setText(String.format("%d Entries", entries));
        this.creditLBL.setText(df.format(this.credit));
        this.debitLBL.setText(df.format(this.debit));
        this.totalLBL.setText(df.format(this.total));        
    }
    
    private void loadAccount() throws InterruptedException, SQLException {
        long startTime = System.nanoTime();
        this.displayTable();
        this.displayInfo();
        long endTime = System.nanoTime();
        System.out.println("Time elapsed: " + (endTime - startTime) / 1_000_000_000.0 + " milliseconds");
        
        
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountCodeTF;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JLabel creditLBL;
    private javax.swing.JLabel debitLBL;
    private javax.swing.JLabel entriesLBL;
    private javax.swing.JButton goBtn;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable ledgerTable;
    private javax.swing.JLabel totalLBL;
    // End of variables declaration//GEN-END:variables
}
